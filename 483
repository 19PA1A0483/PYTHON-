{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled6.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyOdxxmpTv8JdDoOh3j+qeAA",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/19PA1A0483/PYTHON-/blob/master/483\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ifXnHynT4uaG",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Import the required packages\n",
        "import pandas as pd # for handling data in the form of tables\n",
        "import numpy as np # For handling matrix\n",
        "from sklearn.model_selection import train_test_split # For spliting the data into train and test\n",
        "from sklearn.linear_model import LinearRegression # for using the model\n",
        "from sklearn import metrics\n",
        "import matplotlib.pyplot as plt # for plotting"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SbwZDDAZ5BHz",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "outputId": "c635c73f-3675-451a-cda9-7267e0fa6dfd"
      },
      "source": [
        "marks=pd.read_csv(\"students_placement_data (2).csv\")\n",
        "marks\n"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Roll No</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Section</th>\n",
              "      <th>SSC Percentage</th>\n",
              "      <th>inter_Diploma_percentage</th>\n",
              "      <th>B.Tech_percentage</th>\n",
              "      <th>Backlogs</th>\n",
              "      <th>registered_for_ Placement_Training</th>\n",
              "      <th>placement status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>M</td>\n",
              "      <td>A</td>\n",
              "      <td>87.3</td>\n",
              "      <td>65.30</td>\n",
              "      <td>40.00</td>\n",
              "      <td>18</td>\n",
              "      <td>NO</td>\n",
              "      <td>Not placed</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>F</td>\n",
              "      <td>A</td>\n",
              "      <td>89.0</td>\n",
              "      <td>92.40</td>\n",
              "      <td>71.45</td>\n",
              "      <td>0</td>\n",
              "      <td>yes</td>\n",
              "      <td>Placed</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>F</td>\n",
              "      <td>A</td>\n",
              "      <td>67.0</td>\n",
              "      <td>68.00</td>\n",
              "      <td>45.26</td>\n",
              "      <td>13</td>\n",
              "      <td>yes</td>\n",
              "      <td>Not placed</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>M</td>\n",
              "      <td>A</td>\n",
              "      <td>71.0</td>\n",
              "      <td>70.40</td>\n",
              "      <td>36.47</td>\n",
              "      <td>17</td>\n",
              "      <td>yes</td>\n",
              "      <td>Not placed</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>M</td>\n",
              "      <td>A</td>\n",
              "      <td>67.0</td>\n",
              "      <td>65.50</td>\n",
              "      <td>42.52</td>\n",
              "      <td>17</td>\n",
              "      <td>yes</td>\n",
              "      <td>Not placed</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>112</th>\n",
              "      <td>113</td>\n",
              "      <td>M</td>\n",
              "      <td>B</td>\n",
              "      <td>81.1</td>\n",
              "      <td>78.60</td>\n",
              "      <td>35.84</td>\n",
              "      <td>16</td>\n",
              "      <td>NO</td>\n",
              "      <td>Not placed</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>113</th>\n",
              "      <td>114</td>\n",
              "      <td>M</td>\n",
              "      <td>B</td>\n",
              "      <td>81.3</td>\n",
              "      <td>85.12</td>\n",
              "      <td>68.50</td>\n",
              "      <td>0</td>\n",
              "      <td>NO</td>\n",
              "      <td>Not placed</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>114</th>\n",
              "      <td>115</td>\n",
              "      <td>M</td>\n",
              "      <td>B</td>\n",
              "      <td>83.5</td>\n",
              "      <td>89.90</td>\n",
              "      <td>76.30</td>\n",
              "      <td>0</td>\n",
              "      <td>NO</td>\n",
              "      <td>Not placed</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>115</th>\n",
              "      <td>116</td>\n",
              "      <td>M</td>\n",
              "      <td>B</td>\n",
              "      <td>85.5</td>\n",
              "      <td>90.63</td>\n",
              "      <td>74.50</td>\n",
              "      <td>0</td>\n",
              "      <td>NO</td>\n",
              "      <td>Not placed</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>116</th>\n",
              "      <td>117</td>\n",
              "      <td>M</td>\n",
              "      <td>B</td>\n",
              "      <td>80.0</td>\n",
              "      <td>83.33</td>\n",
              "      <td>65.53</td>\n",
              "      <td>0</td>\n",
              "      <td>NO</td>\n",
              "      <td>Not placed</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>117 rows Ã— 9 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     Roll No Gender  ... registered_for_ Placement_Training  placement status\n",
              "0          1      M  ...                                 NO        Not placed\n",
              "1          2      F  ...                                yes            Placed\n",
              "2          3      F  ...                                yes        Not placed\n",
              "3          4      M  ...                                yes        Not placed\n",
              "4          5      M  ...                                yes        Not placed\n",
              "..       ...    ...  ...                                ...               ...\n",
              "112      113      M  ...                                 NO        Not placed\n",
              "113      114      M  ...                                 NO        Not placed\n",
              "114      115      M  ...                                 NO        Not placed\n",
              "115      116      M  ...                                 NO        Not placed\n",
              "116      117      M  ...                                 NO        Not placed\n",
              "\n",
              "[117 rows x 9 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KqVMA-T65svG",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "outputId": "2156bd20-e6a6-40bc-e9da-75cb5d63f91f"
      },
      "source": [
        "marks.plot(x='SSC Percentage',y='inter_Diploma_percentage',style='o')"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f6a2485beb8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXAAAAEGCAYAAAB8Ys7jAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAgAElEQVR4nO3de5wU9Znv8c/DOOigBLwQRZADnkS8\ngA44shq8AF4wmo2YGNGYRE0Ujbom7soRX8eXMYnnZBJNNMkmOZqY1TWReCduzCYYwZigIndREPGC\nLgOJV1yRAQZ4zh9dPTRD37u6q6r7+369eDFT3VP9m5rup3711PP7/czdERGR5OkVdQNERKQ8CuAi\nIgmlAC4iklAK4CIiCaUALiKSULvU8sX22WcfHzp0aC1fUkQk8RYsWPC2uw/oub2mAXzo0KHMnz+/\nli8pIpJ4ZvZ6tu1KoYiIJJQCuIhIQimAi4gkVE1z4Nl0dXWxevVqNm7cGHVTRHaw2267MXjwYJqb\nm6NuikhWkQfw1atX07dvX4YOHYqZRd0cEQDcnXfeeYfVq1czbNiwqJsjklXkAXzjxo0K3hI7Zsbe\ne+/NW2+9FXVTpA7NWNTBTX9cwZp1nezfv4WpE4czadSgkvcTeQAHFLwllvS+lGqYsaiDax9aSmfX\nVgA61nVy7UNLAUoO4rEI4CIi1RJWbzcsN/1xRXfwTuvs2spNf1yhAC4ikhZmbzcsa9Z1lrQ9n8SV\nEc5Y1MHY9lkMm/YoY9tnMWNRR8X7/MQnPlHwObfeeisbNmyo+LUALrjgAoYNG8YRRxzBQQcdxJe+\n9CVWr17d/fhpp53GunXr8u5j3LhxDT2q9c4772TNmjVRN0NiLl9vNyr7928paXs+iQrg6bNpx7pO\nnO1n00qD+FNPPVXwOeUE8K1bt+Z87KabbmLJkiWsWLGCUaNGMWHCBDZv3gzA73//e/r371/SayVB\nvuNRKgVwKUaYvd2wTJ04nJbmph22tTQ3MXXi8JL3lagAXq2z6R577AHAE088wbhx4zjrrLM4+OCD\nOe+883B3fvSjH7FmzRrGjx/P+PHjAZg5cybHHHMMo0eP5nOf+xzr168HUvO9XHPNNYwePZr777+/\n4GubGVdddRX77bcf//mf/9m9j7fffptVq1Z1t+OQQw7hrLPOynoSmT59OiNHjmTEiBFcc801O/xe\nU6dO5bDDDuOkk07i2WefZdy4cRx44IE88sgjAKxatYrjjjuO0aNHM3r06LwnsyeeeILjjz+e008/\nneHDh3PppZeybdu2ko7Hyy+/zEknncQRRxzB6NGjeeWVV4DUCe2oo47i8MMP5xvf+EZ32w455BAu\nvvhiDjvsME455RQ6Ozt54IEHmD9/Pueddx6tra10dnbyrW99i6OOOooRI0YwZcoU0ksFzps3j8MP\nP5zW1lamTp3KiBEjgNTJZOrUqd2vedtttxX8W0nyhNnb7ancbMCkUYP4zmdGMqh/CwYM6t/Cdz4z\nsqyUTqICeC3OposWLeLWW29l2bJlvPrqq8yZM4crr7yS/fffn9mzZzN79mzefvttbrzxRv70pz+x\ncOFC2tra+MEPftC9j7333puFCxdyzjnnFP26o0eP5sUXX9xp+4oVK7jssstYvnw5H/nIR/jpT3+6\nw+Nr1qzhmmuuYdasWSxevJh58+YxY8YMAD788EMmTJjACy+8QN++fbnuuut47LHHePjhh7n++usB\n+OhHP8pjjz3GwoULuffee7nyyivztvPZZ5/lxz/+McuWLeOVV17hoYceKul4nHfeeVx++eUsWbKE\np556ioEDBzJz5kxWrlzJs88+y+LFi1mwYAFPPvkkACtXruTyyy/nhRdeoH///jz44IOcddZZtLW1\n8etf/5rFixfT0tLCFVdcwbx583j++efp7Ozkd7/7HQAXXnght912G4sXL6apaXuv54477qBfv37M\nmzePefPm8fOf/5zXXnut6L+XJEOYvd1MlWYDJo0axJxpE3it/XTmTJtQdj4+UTcx9+/fQkeWYB3G\n2TRtzJgxDB48GIDW1lZWrVrFscceu8NznnnmGZYtW8bYsWMB2Lx5M8ccc0z345MnTy75dXMtLn3A\nAQd0v84XvvAFfvSjH3H11Vd3Pz5v3jzGjRvHgAGpmSbPO+88nnzySSZNmkTv3r059dRTARg5ciS7\n7rorzc3NjBw5klWrVgGpkbBXXHFFd4B76aWX8rZzzJgxHHjggQCce+65/PWvf2W33XYr6nh88MEH\ndHR0cOaZZwKpkY6Q6r3PnDmTUaNGAbB+/XpWrlzJkCFDGDZsGK2trQAceeSR3e3uafbs2Xzve99j\nw4YNvPvuuxx22GEcd9xxfPDBB91t+fznP98d2GfOnMlzzz3HAw88AMD777/PypUrNWinzqQDY9hV\n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\nRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p997N_FK6jrs",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "x=marks['SSC Percentage'].values.reshape(-1,1)\n",
        "y=marks['inter_Diploma_percentage'].values.reshape(-1,1)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Y6iGEZ2_7FGW",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "X_train,X_test,Y_train,Y_test=train_test_split(x,y,test_size=0.2)\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YZ0wnlIK7PIP",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        },
        "outputId": "4ece544d-7da0-47e1-b501-796f6a5de337"
      },
      "source": [
        "model=LinearRegression()\n",
        "model.fit(X_train,Y_train)"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cCeyrW6D7WF8",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "2f84bce0-fcbd-49a6-8404-e9679c657d0e"
      },
      "source": [
        "print(model.intercept_)"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[18.84140883]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "47b5dQ-W7hSJ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "843a8262-d65b-4992-b12b-3d1c4cb2840f"
      },
      "source": [
        "print(model.coef_)"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[0.76736846]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-K8uBq3d7mOA",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "outputId": "8272e78f-79b9-441e-fd22-b53e0aeda57a"
      },
      "source": [
        "predicted_inter_Diploma_percentage=model.predict(X_test) \n",
        "predicted_inter_Diploma_percentage"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[84.83509667],\n",
              "       [82.53299128],\n",
              "       [81.0749912 ],\n",
              "       [89.69253904],\n",
              "       [85.67920198],\n",
              "       [82.91667551],\n",
              "       [85.85569673],\n",
              "       [81.0749912 ],\n",
              "       [83.03945447],\n",
              "       [78.69614896],\n",
              "       [74.09193819],\n",
              "       [76.01035934],\n",
              "       [82.65577023],\n",
              "       [83.94494925],\n",
              "       [84.83509667],\n",
              "       [79.46351743],\n",
              "       [70.25509587],\n",
              "       [81.63517018],\n",
              "       [55.52162138],\n",
              "       [85.85569673],\n",
              "       [80.23088589],\n",
              "       [88.28825475],\n",
              "       [72.55720126],\n",
              "       [74.09193819]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "n6kGz7gg73kI",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 767
        },
        "outputId": "076f2fc6-c412-4495-870e-f41028879a0a"
      },
      "source": [
        "Actual_predicted=pd.DataFrame({'predicted':predicted_inter_Diploma_percentage.flatten(), 'Actual':Y_test.flatten()})\n",
        "Actual_predicted"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>predicted</th>\n",
              "      <th>Actual</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>84.835097</td>\n",
              "      <td>91.90</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>82.532991</td>\n",
              "      <td>83.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>81.074991</td>\n",
              "      <td>78.60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>89.692539</td>\n",
              "      <td>96.90</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>85.679202</td>\n",
              "      <td>81.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>82.916676</td>\n",
              "      <td>89.90</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>85.855697</td>\n",
              "      <td>90.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>81.074991</td>\n",
              "      <td>67.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>83.039454</td>\n",
              "      <td>90.40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>78.696149</td>\n",
              "      <td>59.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>74.091938</td>\n",
              "      <td>84.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>76.010359</td>\n",
              "      <td>69.60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>82.655770</td>\n",
              "      <td>79.90</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>83.944949</td>\n",
              "      <td>91.60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>84.835097</td>\n",
              "      <td>92.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>79.463517</td>\n",
              "      <td>79.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>70.255096</td>\n",
              "      <td>65.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>81.635170</td>\n",
              "      <td>83.70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>55.521621</td>\n",
              "      <td>52.40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>85.855697</td>\n",
              "      <td>96.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>80.230886</td>\n",
              "      <td>83.33</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>88.288255</td>\n",
              "      <td>90.40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>72.557201</td>\n",
              "      <td>81.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>74.091938</td>\n",
              "      <td>81.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    predicted  Actual\n",
              "0   84.835097   91.90\n",
              "1   82.532991   83.00\n",
              "2   81.074991   78.60\n",
              "3   89.692539   96.90\n",
              "4   85.679202   81.00\n",
              "5   82.916676   89.90\n",
              "6   85.855697   90.00\n",
              "7   81.074991   67.50\n",
              "8   83.039454   90.40\n",
              "9   78.696149   59.00\n",
              "10  74.091938   84.50\n",
              "11  76.010359   69.60\n",
              "12  82.655770   79.90\n",
              "13  83.944949   91.60\n",
              "14  84.835097   92.50\n",
              "15  79.463517   79.00\n",
              "16  70.255096   65.50\n",
              "17  81.635170   83.70\n",
              "18  55.521621   52.40\n",
              "19  85.855697   96.50\n",
              "20  80.230886   83.33\n",
              "21  88.288255   90.40\n",
              "22  72.557201   81.00\n",
              "23  74.091938   81.00"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-VTKQh8a8L_9",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "outputId": "cc5d3e34-1510-4598-c175-6951c67db637"
      },
      "source": [
        "plt.scatter(X_test,Y_test,color='red')\n",
        "plt.plot(X_test,predicted_inter_Diploma_percentage)"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f6a24743b38>]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nRCSk/j+k5F+fnInAvQAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tIAyQULI9ZlK",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "adb69386-1673-43e4-d90a-d097da6cebbc"
      },
      "source": [
        "print('R2 error:',metrics.r2_score(Y_test, predicted_inter_Diploma_percentage))\n"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "R2 error: 0.5516892960707972\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}